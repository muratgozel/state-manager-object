const EventEmitter=require("event-emitter-object/source"),kit=require("@basekits/core");function StateManager(a={},b={}){EventEmitter.call(this,b||{}),this._state=a||{},this.kit=kit,this.kit.addKit(require("@basekits/kit-type")),this.kit.addKit(require("@basekits/kit-error")),this.kit.addKit(require("@basekits/kit-validator"))}StateManager.prototype=Object.create(EventEmitter.prototype),StateManager.prototype.constructor=StateManager,StateManager.prototype._prevState=null,StateManager.prototype.updateState=function(a){if(!this.kit.isObject(a))return;if(!this.kit.isObject(this.getState()))throw new Error("Current state is not an object and therefore canceled state update operation.");const b=Object.assign({},this.getState()),c=Object.assign({},b,a);this.kit.isEqual(b,c)||(this.emit("beforeUpdate",[b,c]),this._prevState=b,this._state=c,this.emit("afterUpdate",[this.getState(),this.getPrevState()]))},StateManager.prototype.subscribe=function(a,b){const c=this;c.kit.isFunction(b)&&(c.kit.isString(a)||c.kit.isArray(a))&&c.on("afterUpdate",function(d,e){const f=c.kit.getProp(e,a),g=c.kit.getProp(d,a);c.kit.isEqual(g,f)||b(g,f)})},StateManager.prototype.getState=function(){return this._state},StateManager.prototype.getPrevState=function(){return this._prevState},module.exports=StateManager;